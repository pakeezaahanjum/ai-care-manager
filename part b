#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <algorithm>
#include <cstdint>  // Include this for INT32_MAX
using namespace std;

const int INF = INT32_MAX;

struct Edge {
    int dest, weight;
    Edge(int d, int w) : dest(d), weight(w) {}
};

class Graph {
    int V;
    vector<vector<Edge>> adj;
public:
    Graph(int vertices) : V(vertices) {
        adj.resize(V);
    }

    void addEdge(int u, int v, int w) {
        adj[u].emplace_back(v, w);
        adj[v].emplace_back(u, w);
    }

    void displayAdjacencyList() {
        for (int i = 0; i < V; i++) {
            cout << "Adjacency list of vertex " << i << ": ";
            for (auto& edge : adj[i]) {
                cout << " -> " << edge.dest << "(" << edge.weight << ")";
            }
            cout << endl;
        }
    }

    void dijkstra(int src) {
        vector<int> dist(V, INF);
        vector<int> parent(V, -1);
        vector<bool> visited(V, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;

        dist[src] = 0;
        pq.push({0, src});

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            // Process the node if it has not been visited
            if (visited[u]) continue;
            visited[u] = true;

            // Relax the edges
            for (auto& edge : adj[u]) {
                int v = edge.dest, weight = edge.weight;
                if (!visited[v] && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    parent[v] = u;
                    pq.push({dist[v], v});
                }
            }

            // Print the Dijkstra table after each iteration
            cout << "Dijkstra table after processing node " << u << ":\n";
            cout << "Node | Distance | Parent\n";
            for (int i = 0; i < V; i++) {
                cout << i << "    | " << dist[i] << "       | " << parent[i] << endl;
            }
            cout << "--------------------------\n";
        }

        // Final Shortest Paths
        cout << "Shortest paths from node " << src << ":\n";
        for (int i = 0; i < V; i++) {
            cout << "Node " << i << " distance: " << dist[i] << ", Path: ";
            printPath(parent, i);
            cout << i << endl;
        }
    }

    void printPath(const vector<int>& parent, int v) {
        if (parent[v] == -1) return;
        printPath(parent, parent[v]);
        cout << v << " <- ";
    }
};

void calculateDistanceAndRotations() {
    srand(time(0));
    int x = rand() % 100;
    int y = rand() % 100;
    double distance = sqrt(x * x + y * y);
    int tyre_rotations = static_cast<int>(distance * 10);

    cout << "Here Alex will find coordinates of the destination by using IR sensors installed in its machine body, ";
    cout << "to proceed the code I have generated random coordinates." << endl;
    cout << "Coordinates are (" << x << "," << y << ")" << endl;
    cout << fixed << setprecision(4);
    cout << "Distance between these points is " << distance << endl;
    cout << "Total tyre rotations needed are " << tyre_rotations << " cm" << endl;
}

int main() {
    calculateDistanceAndRotations();

    Graph g(6);
    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 8);
    g.addEdge(1, 3, 5);
    g.addEdge(1, 4, 6);
    g.addEdge(2, 4, 9);
    g.addEdge(2, 5, 3);
    g.addEdge(3, 4, 3);
    g.addEdge(4, 5, 1);

    g.displayAdjacencyList();
    g.dijkstra(0);

    cout << "\n\n=== Code Execution Successful ===\n";
    return 0;
}
